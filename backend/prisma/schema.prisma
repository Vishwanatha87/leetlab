// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

model User {
  id                       String          @id @default(uuid())
  name                     String?
  email                    String          @unique
  image                    String?
  role                     UserRole        @default(USER)
  password                 String
  isVerified               Boolean         @default(false)
  verificationToken        String?
  verificationTokenExpiry  DateTime?
  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?
  createdAt                DateTime        @default(now())
  updatedAt                DateTime        @updatedAt
  problems                 Problem[]
  submissions              Submission[]
  solvedProblem            ProblemSolved[]
  playlists                Playlist[]
}

model Problem {
  id          String     @id @default(uuid())
  title       String
  description String
  difficulty  Difficulty
  tags        String[]
  userId      String
  examples    Json
  constraints String
  hints       String?
  editorial   String?

  testcases          Json
  codeSnippets       Json
  referenceSolutions Json
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  submissions      Submission[]
  problemSolvedBy  ProblemSolved[]
  problemPlaylists ProblemInPlaylist[]

  // relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Submission {
  id            String   @id @default(uuid())
  problemId     String
  userId        String
  sourceCode    Json
  language      String
  stdin         String?
  stdout        String?
  stderr        String?
  compileOutput String?
  status        String //accepted or wrong answer
  memory        String?
  time          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  testcases TestCaseResult[]
}

model TestCaseResult {
  id             String   @id @default(uuid())
  submissionId   String
  testcase       Int
  passed         Boolean
  stdout         String?
  expectedOutput String
  stderr         String?
  compileOutput  String?
  status         String
  time           String?
  memory         String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // relations
  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
}

model ProblemSolved {
  id        String   @id @default(uuid())
  userId    String
  problemId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  problem Problem @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([userId, problemId])
}

model Playlist {
  id          String              @id @default(uuid())
  name        String
  description String?
  userId      String
  problems    ProblemInPlaylist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId]) // unique playlist name for each user
}

model ProblemInPlaylist {
  id         String @id @default(uuid())
  playlistId String
  problemId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  problem  Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([playlistId, problemId]) // unique problem in each playlist
}
